Backend?


Client-Server Model


Web Devlopment
1. Front End Dev : Process of developing UI which is visible on client's screen
2. Back End Dev : Process of fetching/storing and processing the data

Full Stack Developer


Technologies : 

Front End : HTML, CSS and JS (Vanilla JS)
Front End FW/Lib : Angular, React, Vue, KnockoutJS, Dojo etc
Back End : 
    Java : Spring, Spring Boot, Hibernate, Struts etc, 
    .net : MVC Framework, Entity Framework, SiteCore etc, 
    PHP : Laravel, CI (Code Igniter), Symphony, Drupal, Wordpress etc, 
    GoLang, 
    ROR, 
    JS : ExpressJS, NestJS, Ember JS etc

MERN : Mongo Express React   Node
MEAN : Mongo Express Angular Node

Node? JS Environment : File system, operating system, security features etc
Java : JRE (Java Runtime Environment)

NPM?

Android : Play Store
MI Store
Samsung Store

Apple : App Store
Windows : Windows Store


JS Store : NPM (npmjs.com) (Node Package Manager)
Yarn 
PHP : Composer
Python : PIP etc


Low Level Language : Machines C, C++, Pascal etc
High Level Language : They work on OS : JS, PHP, Java etc

NodeJS? (Majorly JS, Minor C++)

30 Aug

NodeJS
Express

Database

SQL (Structure Query Language) : MySQL, MSSQL, PostgresQL, Oracle etc
NoSQL : MongoDB, Cassandra DB, GraphQL etc

Mongo? MQL

31 Aug
Events module

element.addEventListener(callbackFn);
onClick={callbackFn}

Event Emitter : Emits the event
Event Listener : Receives/Listens the event

1 Sep

Req/Res => http calls

XmlHttpRequest (XHR) => Mechanism to call APIs
fetch() => XMLHttpRequest
axios() => XMLHttpRequest

Port => A gate in our system which allows http requests to pass through

Gate A => 3000
Gate B => 8080
Gate C => 65535

21/22 => FTP
443 => HTTPS 


Req -> URL/EndPoint?
http://localhost:8081


Methods
GET
POST

4 Sep 

npm => node package manager
package.json

https://www.geeksforgeeks.org/difference-between-tilde-and-caret-in-package-json/

5 Sep
Steps to publish package on npmjs.com
1. Create a nodejs pacakge
2. Create an account npmjs.com
3. In package.json change the "main" entry to your main js file
4. Verify the package name to be unique in package.json use command npm search <pkg-name>
5. npm login
6. npm publish


How nodejs works?
Components of nodejs

Engines : Used to run js (chrome : v8, mozilla: spider monkey, edge: chakra etc )
v8 engine : C++
event loop : Watchman
event queue : Operations are queued here (Blocking IO, Non Blocking IO (Sync/Async))
thread pool : libuv (C++) -> It takes care of async operations
call stack : Executes the operations of JS

Thread = Process

Is NodeJS multithreaded?
NodeJS is single threaded since it has only 1 main thread, however there is a c++ library (libuv) which provied multi threading capabilites to nodejs using system(hardware) resources.
https://github.com/nodejs/node

API (Application Programming Interface)

REST APIs (RepresEntations State Transfer) : JSON
SOAP APIs (Simple Object Access Protocol) : XML (Extensible Markup Language)

E.g :

JSON
user : {
    name: "ABC",
    age: 30,
    address: "ABC 123 Street"
}


XML
<user>
    <name>ABC</name>
    <age>30</age>
    <address>ABC 123 Street</address>
</user>

APIs
1. End Point / URL : http://abc.com/list
2. HTTP Method ?

GET : To fetch the resources from server (Get the list of products, get details of a user etc)
POST : To store data on server (Login, Signup, Place order etc)
PUT : To replace a resource on the server
PATCH : To update a resource on the server
DELETE : To delete a resource on the server

AXIOS.GET
AXIOS.POST

fetch("",{method: "POST"})


End point : https://abc.com/user
GET
POST
PUT
PATCH
DELETE

API/HTTP call Parts
1. Header : Meta data
2. Body : Actual data


Static API : Always provides same data
Dynamic API : It provides different data based on the parameter

6 Sep

Express : JS Framework

1. Install express npm i express
2. Import express in index.js file
3. Create an express object

7 Sep

HTTP Status Codes : 
1xx
2xx (Success) : 200 Ok, 201 Created, 202 Accepted, 204 No Content etc
3xx
4xx (Client Error) : 400  Bad Request, 401 Unatuthorized, 403 Forbidden (Access Denied), 404 Not found
5xx (Server Error) : 500 Internal Server error, 503, 504 etc

11 Sep

Modular Structure 
Architecture : 
MVC (Model View Controller)

View : UI ?
Controller : Controlling Unit / Business Logic, Routes etc
Model : Data Modelling (Defining the structure of data)

Tightly Coupled : Java, .net, PHP, nodejs
Loosely Coupled : Java, .net, PHP, nodejs

MVVM etc

Modules in Project

Product : Get list, get details, update product, delete product etc
User : Login, Signup, forgot password, reset password etc
Cart : Add to cart, remove from cart, update cart, get cart etc
Wishlist : Add to cart, remove from cart, update cart, get cart etc
Checkout : Get billing address, Get shipping address, get payment methods etc
My Account : Order history, Order tracking etc


Express Routing
1. Require express
2. Create router instance using new express.Router();
3. router.get(), router.post()


/api/api-version/module-name/end-point

/api/v1/user/login
/api/v1/user/register
/api/v1/user/forgot-password

/api/v1/product/list
/api/v1/product/details
/api/v1/product/update
/api/v1/product/delet

12 Sep

Middleware

Front end calls the API -> Request is received by the server -> (MIDDLWARE) -> Route is matched on the server -> Request is sent to the controller -> Response is sent back to the client

Accepts the incomming request
Perfrom certain checks
Decide wheter to allow this rquest to go through

Built in middlewares
Third party middlewares
Custom middleware


Same Origin (Client : http://localhost:3000, Server : http://localhost:3000)
Cross Origin (Client : http://localhost:8081, Server : https://abc.com)

CORS (Cross Origin Resource Sharing)
NPM Package : https://www.npmjs.com/package/cors

Scope 
1. App level
2. Module level
3. Route level

14 Sep
DB : 
NoSQL : MongoDB (C++)
SQL : MySQL

Database Server => Databases => Collections => Records (Documents)

Eg : Database Server => ecommerce => users => user
Database Server => ecommerce => products => proudct

CLI (Command Line Interface)
GUI (Graphical User Interface) : MongoDB Compass, RoboMongo

localhost:27017

MongoDB Data Format : BSON
Query : A statement to fetch the data

{
    name: "Peter",
    phone: "1234567890",
    email: "peter@example.com",
    address: "ABCD 1234, NY",
    age: 30,
    hasDrivingLicense: true
}

// Schema
{
    name : {
        type: String
    },
    phone:  {
        type: String
    },
    email: {
        type: String
    },
    address: {
        type: String
    },
    age: {
        type: Number
    },
    hasDrivingLicense: {
        type: Boolean
    }
}

// Product Schema
{
    name: {
        type: String,
        required: true
    },
    price: {
        type: Number,
        required: true
    },
    descripton: {
        type: String,
        default: ""
    },
    expiryDate: {
        type: Date,
        default: "2099-01-01"
    },
    quantity: {
        type: Number,
        required: true
    },
    ratings: {
        type: Number,
        default: 5 
    }
}

{
    "name": "Mobile",
    "price": 70000,
    "description": "5G Mobile",
    "expiryDate": "299-01-01",
    "quantity": 1000,
    "ratings" : 4.5
}

19 Sep
show dbs
use <db-name>
show collections

INSERTIONG QUERY => db.<collection-name>.insertOne({key value pairs});
FIND QUERY => db.<collection-name>.find({find parameteres});
Eg: Find all the products with brand as Samsung
db.products.find({brand: "Samsumg"});

$lt (<)
$gt (>)
$gte (>=)
$lte (<=)
Find all the products whose prices is greater than $500

db.products.find({
    price: {
        $gt: 500
    }
})

Find all the products whose prices is less than $500
db.products.find({
    price: {
        $lt: 500
    }
}).count()

Find all the products whose price is between 499 and 599
db.products.find({
    price: {
        $gte: 499,
        $lte: 599
    }
})

db.products.find({
    $and: [
        {
            price: {
                $gte: 499
            }
        },
        {
            price: {
                $lte: 599
            }
        }
    ]
})

Get all the products whose brand is Samsung and price is $1499
db.products.find({
    $and: [
        {
            brand: "Samsung"
        },
        {
            price: 1499
        }
    ]
})

Get all the products whose brand is Samsung and price is greater than $500
db.products.find({
    $and: [
        {
            brand: "Samsung"
        },
        {
            price: {
                $gt: 500
            }
        }
    ]
})

Get all the products whose brand is Samsung and price is greater than $500 and ratings are greater than 4

db.products.find({
    $and: [
        {
            brand: "Samsung"
        },
        {
            price: {
                $gt: 500
            }
        },
        {
            rating: {
                $gt: 4
            }
        }
    ]
})

Find all the products whose category is smartphones or rating are greater than 4.9
db.products.find({
    $or: [
        {
            category: "smartphones"
        },
        {
            rating: {
                $gt: 4.9
            }
        }
    ]
}).count()

Find all smartphones from the database whose rating is greater than 4 and price less than 500

% Find all smartphones from the database whose rating is greater than 4 and price less than 500
Find all the products whose category is smartphones and rating is greater than 4 and price is less than 500
Find all the smartphones from the database have at least 4 star ratings and are cheaper then $500


db.products.find({
    $and: [
        {
            category: "smartphones"
        },
        {
            rating: {
                $gt: 4
            }
        },
        {
            price: {
                $lt: 500
            }
        }
    ]
}).count()

db.products.find({
    rating: {
        $gt: 4.5
    }
}).limit(5)

List all the products in decending order of their prices

db.products
.find({})
.sort({
    price: 1
})
.limit(10)
.skip(20)

$and => &&
$or => ||
$not => !


Pagination 
99 Products
Page 1 : 1-10
Page 2 : 11-20
Page 3 : 21-30
...


Partial search
Find all the products containing oil in their name

db.products.find({
    oil: /oil/i
})

db.products.find({
    title: /shirt/i
})

Update

Change the rating to 5 of product whose id is 2
db.<collection-name>.update(<find-object>,<update-object>);
db.products.update(
    {id: 2},
    {
    $set : {
        rating: 5
    }
})


Change the title of product with id 3 to Laptop
db.products.update(
    { id: 3},
    {
        $set: {
            title: "Laptop"
        }
    }
)

Delete
Delete the product with id 2
db.<collection-name>.remove(<find-object>)
db.products.remove({
    id: 2
})

21 Sep
DB - NodeJS connection
ODM (Object Data Model) Mongoose